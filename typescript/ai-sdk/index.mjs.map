{"version":3,"sources":["../src/shared/api.ts","../src/shared/customers/functions.ts","../src/shared/products/functions.ts","../src/shared/prices/functions.ts","../src/shared/paymentLinks/functions.ts","../src/shared/invoices/functions.ts","../src/shared/invoiceItems/functions.ts","../src/shared/balance/functions.ts","../src/shared/refunds/functions.ts","../src/shared/documentation/functions.ts","../src/shared/paymentIntents/functions.ts","../src/shared/subscriptions/functions.ts","../src/shared/customers/prompts.ts","../src/shared/products/prompts.ts","../src/shared/prices/prompts.ts","../src/shared/paymentLinks/prompts.ts","../src/shared/invoices/prompts.ts","../src/shared/invoiceItems/prompts.ts","../src/shared/balance/prompts.ts","../src/shared/refunds/prompts.ts","../src/shared/documentation/prompts.ts","../src/shared/paymentIntents/prompts.ts","../src/shared/subscriptions/prompts.ts","../src/shared/customers/parameters.ts","../src/shared/products/parameters.ts","../src/shared/prices/parameters.ts","../src/shared/paymentLinks/parameters.ts","../src/shared/invoices/parameters.ts","../src/shared/invoiceItems/parameters.ts","../src/shared/balance/parameters.ts","../src/shared/refunds/parameters.ts","../src/shared/documentation/parameters.ts","../src/shared/paymentIntents/parameters.ts","../src/shared/subscriptions/parameters.ts","../src/shared/tools.ts","../src/shared/configuration.ts","../src/ai-sdk/tool.ts","../src/ai-sdk/toolkit.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport {createCustomer, listCustomers} from './customers/functions';\nimport {createProduct, listProducts} from './products/functions';\nimport {createPrice, listPrices} from './prices/functions';\nimport {createPaymentLink} from './paymentLinks/functions';\nimport {\n  createInvoice,\n  listInvoices,\n  finalizeInvoice,\n} from '@/shared/invoices/functions';\nimport {createInvoiceItem} from '@/shared/invoiceItems/functions';\nimport {retrieveBalance} from '@/shared/balance/functions';\nimport {createRefund} from '@/shared/refunds/functions';\nimport {searchDocumentation} from '@/shared/documentation/functions';\nimport {listPaymentIntents} from '@/shared/paymentIntents/functions';\nimport {listSubscriptions} from '@/shared/subscriptions/functions';\n\nimport type {Context} from './configuration';\n\nconst TOOLKIT_HEADER = 'stripe-agent-toolkit-typescript';\nconst MCP_HEADER = 'stripe-mcp';\n\nclass StripeAPI {\n  stripe: Stripe;\n\n  context: Context;\n\n  constructor(secretKey: string, context?: Context) {\n    const stripeClient = new Stripe(secretKey, {\n      appInfo: {\n        name:\n          context?.mode === 'modelcontextprotocol'\n            ? MCP_HEADER\n            : TOOLKIT_HEADER,\n        version: '0.5.3',\n        url: 'https://github.com/stripe/agent-toolkit',\n      },\n    });\n    this.stripe = stripeClient;\n    this.context = context || {};\n  }\n\n  async createMeterEvent({\n    event,\n    customer,\n    value,\n  }: {\n    event: string;\n    customer: string;\n    value: string;\n  }) {\n    await this.stripe.billing.meterEvents.create(\n      {\n        event_name: event,\n        payload: {\n          stripe_customer_id: customer,\n          value: value,\n        },\n      },\n      this.context.account ? {stripeAccount: this.context.account} : undefined\n    );\n  }\n\n  async run(method: string, arg: any) {\n    if (method === 'create_customer') {\n      const output = JSON.stringify(\n        await createCustomer(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_customers') {\n      const output = JSON.stringify(\n        await listCustomers(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_product') {\n      const output = JSON.stringify(\n        await createProduct(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_products') {\n      const output = JSON.stringify(\n        await listProducts(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_price') {\n      const output = JSON.stringify(\n        await createPrice(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_prices') {\n      const output = JSON.stringify(\n        await listPrices(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_payment_link') {\n      const output = JSON.stringify(\n        await createPaymentLink(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_invoice') {\n      const output = JSON.stringify(\n        await createInvoice(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_invoices') {\n      const output = JSON.stringify(\n        await listInvoices(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_invoice_item') {\n      const output = JSON.stringify(\n        await createInvoiceItem(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'finalize_invoice') {\n      const output = JSON.stringify(\n        await finalizeInvoice(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'retrieve_balance') {\n      const output = JSON.stringify(\n        await retrieveBalance(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'create_refund') {\n      const output = JSON.stringify(\n        await createRefund(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_payment_intents') {\n      const output = JSON.stringify(\n        await listPaymentIntents(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'list_subscriptions') {\n      const output = JSON.stringify(\n        await listSubscriptions(this.stripe, this.context, arg)\n      );\n      return output;\n    } else if (method === 'search_documentation') {\n      const output = JSON.stringify(\n        await searchDocumentation(this.stripe, this.context, arg)\n      );\n      return output;\n    } else {\n      throw new Error('Invalid method ' + method);\n    }\n  }\n}\n\nexport default StripeAPI;\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createCustomerParameters, listCustomersParameters} from './parameters';\n\nexport const createCustomer = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createCustomerParameters>>\n) => {\n  try {\n    const customer = await stripe.customers.create(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {id: customer.id};\n  } catch (error) {\n    return 'Failed to create customer';\n  }\n};\n\nexport const listCustomers = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listCustomersParameters>>\n) => {\n  try {\n    const customers = await stripe.customers.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return customers.data.map((customer) => ({\n      id: customer.id,\n      email: customer.email,\n      name: customer.name\n    }));\n  } catch (error) {\n    return 'Failed to list customers';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createProductParameters, listProductsParameters} from './parameters';\n\nexport const createProduct = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createProductParameters>>\n) => {\n  try {\n    const product = await stripe.products.create(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return product;\n  } catch (error) {\n    return 'Failed to create product';\n  }\n};\n\nexport const listProducts = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listProductsParameters>>\n) => {\n  try {\n    const products = await stripe.products.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return products.data;\n  } catch (error) {\n    return 'Failed to list products';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createPriceParameters, listPricesParameters} from './parameters';\n\nexport const createPrice = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createPriceParameters>>\n) => {\n  try {\n    const price = await stripe.prices.create(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return price;\n  } catch (error) {\n    return 'Failed to create price';\n  }\n};\n\nexport const listPrices = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listPricesParameters>>\n) => {\n  try {\n    const prices = await stripe.prices.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return prices.data;\n  } catch (error) {\n    return 'Failed to list prices';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createPaymentLinkParameters} from './parameters';\n\nexport const createPaymentLink = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createPaymentLinkParameters>>\n) => {\n  try {\n    const paymentLink = await stripe.paymentLinks.create(\n      {\n        line_items: [params],\n      },\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {id: paymentLink.id, url: paymentLink.url};\n  } catch (error) {\n    return 'Failed to create payment link';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {\n  createInvoiceParameters,\n  listInvoicesParameters,\n  finalizeInvoiceParameters,\n} from './parameters';\n\nexport const createInvoice = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createInvoiceParameters>>\n) => {\n  try {\n    if (context.customer) {\n      params.customer = context.customer;\n    }\n\n    const invoice = await stripe.invoices.create(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {\n      id: invoice.id,\n      url: invoice.hosted_invoice_url,\n      customer: invoice.customer,\n      status: invoice.status,\n    };\n  } catch (error) {\n    return 'Failed to create invoice';\n  }\n};\n\nexport const listInvoices = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listInvoicesParameters>>\n) => {\n  try {\n    if (context.customer) {\n      params.customer = context.customer;\n    }\n\n    const invoices = await stripe.invoices.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return invoices.data;\n  } catch (error) {\n    return 'Failed to list invoices';\n  }\n};\n\nexport const finalizeInvoice = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof finalizeInvoiceParameters>>\n) => {\n  try {\n    const invoice = await stripe.invoices.finalizeInvoice(\n      params.invoice,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {\n      id: invoice.id,\n      url: invoice.hosted_invoice_url,\n      customer: invoice.customer,\n      status: invoice.status,\n    };\n  } catch (error) {\n    return 'Failed to finalize invoice';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createInvoiceItemParameters} from './parameters';\n\nexport const createInvoiceItem = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createInvoiceItemParameters>>\n) => {\n  try {\n    if (context.customer) {\n      params.customer = context.customer;\n    }\n\n    const invoiceItem = await stripe.invoiceItems.create(\n      // @ts-ignore\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {\n      id: invoiceItem.id,\n      invoice: invoiceItem.invoice,\n    };\n  } catch (error) {\n    return 'Failed to create invoice item';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {retrieveBalanceParameters} from './parameters';\n\nexport const retrieveBalance = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof retrieveBalanceParameters>>\n) => {\n  try {\n    const balance = await stripe.balance.retrieve(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return balance;\n  } catch (error) {\n    return 'Failed to retrieve balance';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {createRefundParameters} from './parameters';\n\nexport const createRefund = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof createRefundParameters>>\n) => {\n  try {\n    const refund = await stripe.refunds.create(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return {\n      id: refund.id,\n      status: refund.status,\n      amount: refund.amount,\n    };\n  } catch (error) {\n    return 'Failed to create refund';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {searchDocumentationParameters} from './parameters';\n\nexport const searchDocumentation = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof searchDocumentationParameters>>\n) => {\n  try {\n    const endpoint = 'https://ai.stripe.com/search';\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'fetch',\n        'User-Agent':\n          context.mode === 'modelcontextprotocol'\n            ? 'stripe-mcp'\n            : 'stripe-agent-toolkit-typescript',\n      },\n      body: JSON.stringify(params),\n    });\n\n    // If status not in 200-299 range, throw error\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data?.sources;\n  } catch (error) {\n    return 'Failed to search documentation';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {listPaymentIntentsParameters} from './parameters';\n\nexport const listPaymentIntents = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listPaymentIntentsParameters>>\n) => {\n  try {\n    if (context.customer) {\n      params.customer = context.customer;\n    }\n\n    const paymentIntents = await stripe.paymentIntents.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return paymentIntents.data;\n  } catch (error) {\n    return 'Failed to list payment intents';\n  }\n};\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\nimport {listSubscriptionsParameters} from './parameters';\n\nexport const listSubscriptions = async (\n  stripe: Stripe,\n  context: Context,\n  params: z.infer<ReturnType<typeof listSubscriptionsParameters>>\n) => {\n  try {\n    if (context.customer) {\n      params.customer = context.customer;\n    }\n\n    const subscriptions = await stripe.subscriptions.list(\n      params,\n      context.account ? {stripeAccount: context.account} : undefined\n    );\n\n    return subscriptions.data;\n  } catch (error) {\n    return 'Failed to list subscriptions';\n  }\n};\n","import type {Context} from '@/shared/configuration';\n\nexport const createCustomerPrompt = (_context: Context = {}) => `\nThis tool will create a customer in Stripe.\n\nIt takes two arguments:\n- name (str): The name of the customer.\n- email (str, optional): The email of the customer.\n`;\n\nexport const listCustomersPrompt = (_context: Context = {}) => `\nThis tool will fetch a list of Customers from Stripe.\n\nIt takes no input.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createProductPrompt = (_context: Context = {}) => `\nThis tool will create a product in Stripe.\n\nIt takes two arguments:\n- name (str): The name of the product.\n- description (str, optional): The description of the product.\n`;\n\nexport const listProductsPrompt = (_context: Context = {}) => `\nThis tool will fetch a list of Products from Stripe.\n\nIt takes one optional argument:\n- limit (int, optional): The number of products to return.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createPricePrompt = (_context: Context = {}) => `\nThis tool will create a price in Stripe. If a product has not already been specified, a product should be created first.\n\nIt takes three arguments:\n- product (str): The ID of the product to create the price for.\n- unit_amount (int): The unit amount of the price in cents.\n- currency (str): The currency of the price.\n`;\n\nexport const listPricesPrompt = (_context: Context = {}) => `\nThis tool will fetch a list of Prices from Stripe.\n\nIt takes two arguments.\n- product (str, optional): The ID of the product to list prices for.\n- limit (int, optional): The number of prices to return.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createPaymentLinkPrompt = (_context: Context = {}) => `\nThis tool will create a payment link in Stripe.\n\nIt takes two arguments:\n- price (str): The ID of the price to create the payment link for.\n- quantity (int): The quantity of the product to include in the payment link.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createInvoicePrompt = (context: Context = {}) => {\n  const customerArg = context.customer\n    ? ''\n    : `- customer (str): The ID of the customer to create the invoice for.\\n`;\n\n  return `\nThis tool will create an invoice in Stripe.\n\nIt takes ${context.customer ? 'one' : 'two'} argument${context.customer ? '' : 's'}:\n${customerArg}\n- days_until_due (int, optional): The number of days until the invoice is due.\n`;\n};\n\nexport const listInvoicesPrompt = (context: Context = {}) => {\n  const customerArg = context.customer\n    ? ''\n    : `- customer (str, optional): The ID of the customer to list invoices for.\\n`;\n\n  return `\nThis tool will fetch a list of Invoices from Stripe.\n\nIt takes ${context.customer ? 'one' : 'two'} argument${context.customer ? '' : 's'}:\n${customerArg}\n- limit (int, optional): The number of invoices to return.\n`;\n};\n\nexport const finalizeInvoicePrompt = (_context: Context = {}) => `\nThis tool will finalize an invoice in Stripe.\n\nIt takes one argument:\n- invoice (str): The ID of the invoice to finalize.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createInvoiceItemPrompt = (context: Context = {}) => {\n  const customerArg = context.customer\n    ? ''\n    : `- customer (str): The ID of the customer to create the invoice item for.\\n`;\n\n  return `\nThis tool will create an invoice item in Stripe.\n\nIt takes ${context.customer ? 'one' : 'two'} argument${context.customer ? '' : 's'}:\n${customerArg}\n- price (str): The ID of the price to create the invoice item for.\n- invoice (str): The ID of the invoice to create the invoice item for.\n`;\n};\n","import type {Context} from '@/shared/configuration';\n\nexport const retrieveBalancePrompt = (_context: Context = {}) => `\nThis tool will retrieve the balance from Stripe. It takes no input.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const createRefundPrompt = (_context: Context = {}) => `\nThis tool will refund a payment intent in Stripe.\n\nIt takes three arguments:\n- payment_intent (str): The ID of the payment intent to refund.\n- amount (int, optional): The amount to refund in cents.\n- reason (str, optional): The reason for the refund.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const searchDocumentationPrompt = (_context: Context = {}) => `\nThis tool will take in a user question about integrating with Stripe in their application, then search and retrieve relevant Stripe documentation to answer the question.\n\nIt takes two arguments:\n- question (str): The user question to search an answer for in the Stripe documentation.\n- language (str, optional): The programming language to search for in the the documentation.\n`;\n","import type {Context} from '@/shared/configuration';\n\nexport const listPaymentIntentsPrompt = (context: Context = {}) => {\n  const customerArg = context.customer\n    ? ''\n    : `- customer (str, optional): The ID of the customer to list payment intents for.\\n`;\n\n  return `\nThis tool will list payment intents in Stripe.\n\nIt takes ${context.customer ? 'one' : 'two'} argument${context.customer ? '' : 's'}:\n${customerArg}\n- limit (int, optional): The number of payment intents to return.\n`;\n};\n","import type {Context} from '@/shared/configuration';\n\nexport const listSubscriptionsPrompt = (context: Context = {}): string => {\n  const customerArg = context.customer\n    ? ''\n    : `- customer (str, optional): The ID of the customer to list subscriptions for.\\n`;\n\n  return `\nThis tool will list all subscriptions in Stripe.\n\nIt takes ${context.customer ? 'three' : 'four'} arguments:\n${customerArg}\n- price (str, optional): The ID of the price to list subscriptions for.\n- status (str, optional): The status of the subscriptions to list.\n- limit (int, optional): The number of subscriptions to return.\n`;\n};\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createCustomerParameters = (\n  _context: Context = {}\n): z.AnyZodObject =>\n  z.object({\n    name: z.string().describe('The name of the customer'),\n    email: z.string().email().optional().describe('The email of the customer'),\n  });\n\nexport const listCustomersParameters = (_context: Context = {}) =>\n  z.object({\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100.'\n      ),\n    email: z\n      .string()\n      .optional()\n      .describe(\n        \"A case-sensitive filter on the list based on the customer's email field. The value must be a string.\"\n      ),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createProductParameters = (_context: Context = {}) =>\n  z.object({\n    name: z.string().describe('The name of the product.'),\n    description: z\n      .string()\n      .optional()\n      .describe('The description of the product.'),\n  });\n\nexport const listProductsParameters = (\n  _context: Context = {}\n): z.AnyZodObject =>\n  z.object({\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n      ),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createPriceParameters = (_context: Context = {}) =>\n  z.object({\n    product: z\n      .string()\n      .describe('The ID of the product to create the price for.'),\n    unit_amount: z\n      .number()\n      .int()\n      .describe('The unit amount of the price in cents.'),\n    currency: z.string().describe('The currency of the price.'),\n  });\n\nexport const listPricesParameters = (_context: Context = {}): z.AnyZodObject =>\n  z.object({\n    product: z\n      .string()\n      .optional()\n      .describe('The ID of the product to list prices for.'),\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n      ),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createPaymentLinkParameters = (_context: Context = {}) =>\n  z.object({\n    price: z\n      .string()\n      .describe('The ID of the price to create the payment link for.'),\n    quantity: z\n      .number()\n      .int()\n      .describe('The quantity of the product to include.'),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createInvoiceParameters = (\n  context: Context = {}\n): z.AnyZodObject => {\n  const schema = z.object({\n    customer: z\n      .string()\n      .describe('The ID of the customer to create the invoice for.'),\n    days_until_due: z\n      .number()\n      .int()\n      .optional()\n      .describe('The number of days until the invoice is due.'),\n  });\n\n  if (context.customer) {\n    return schema.omit({customer: true});\n  } else {\n    return schema;\n  }\n};\n\nexport const listInvoicesParameters = (\n  context: Context = {}\n): z.AnyZodObject => {\n  const schema = z.object({\n    customer: z\n      .string()\n      .optional()\n      .describe('The ID of the customer to list invoices for.'),\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n      ),\n  });\n\n  if (context.customer) {\n    return schema.omit({customer: true});\n  } else {\n    return schema;\n  }\n};\n\nexport const finalizeInvoiceParameters = (\n  _context: Context = {}\n): z.AnyZodObject =>\n  z.object({\n    invoice: z.string().describe('The ID of the invoice to finalize.'),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createInvoiceItemParameters = (\n  context: Context = {}\n): z.AnyZodObject => {\n  const schema = z.object({\n    customer: z\n      .string()\n      .describe('The ID of the customer to create the invoice item for.'),\n    price: z.string().describe('The ID of the price for the item.'),\n    invoice: z\n      .string()\n      .describe('The ID of the invoice to create the item for.'),\n  });\n\n  if (context.customer) {\n    return schema.omit({customer: true});\n  } else {\n    return schema;\n  }\n};\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const retrieveBalanceParameters = (\n  _context: Context = {}\n): z.AnyZodObject => z.object({});\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const createRefundParameters = (\n  _context: Context = {}\n): z.AnyZodObject =>\n  z.object({\n    payment_intent: z\n      .string()\n      .describe('The ID of the PaymentIntent to refund.'),\n    amount: z\n      .number()\n      .int()\n      .optional()\n      .describe('The amount to refund in cents.'),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const searchDocumentationParameters = (\n  _context: Context = {}\n): z.AnyZodObject =>\n  z.object({\n    question: z\n      .string()\n      .describe(\n        'The user question about integrating with Stripe will be used to search the documentation.'\n      ),\n    language: z\n      .enum(['dotnet', 'go', 'java', 'node', 'php', 'ruby', 'python', 'curl'])\n      .optional()\n      .describe(\n        'The programming language to search for in the the documentation.'\n      ),\n  });\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const listPaymentIntentsParameters = (\n  context: Context = {}\n): z.AnyZodObject => {\n  const schema = z.object({\n    customer: z\n      .string()\n      .optional()\n      .describe('The ID of the customer to list payment intents for.'),\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100.'\n      ),\n  });\n\n  if (context.customer) {\n    return schema.omit({customer: true});\n  } else {\n    return schema;\n  }\n};\n","import {z} from 'zod';\nimport type {Context} from '@/shared/configuration';\n\nexport const listSubscriptionsParameters = (\n  context: Context = {}\n): z.AnyZodObject => {\n  const schema = z.object({\n    customer: z\n      .string()\n      .optional()\n      .describe('The ID of the customer to list subscriptions for.'),\n    price: z\n      .string()\n      .optional()\n      .describe('The ID of the price to list subscriptions for.'),\n    status: z\n      .enum([\n        'active',\n        'past_due',\n        'unpaid',\n        'canceled',\n        'incomplete',\n        'incomplete_expired',\n        'trialing',\n        'all',\n      ])\n      .optional()\n      .describe('The status of the subscriptions to retrieve.'),\n    limit: z\n      .number()\n      .int()\n      .min(1)\n      .max(100)\n      .optional()\n      .describe(\n        'A limit on the number of objects to be returned. Limit can range between 1 and 100.'\n      ),\n  });\n\n  if (context.customer) {\n    return schema.omit({customer: true});\n  } else {\n    return schema;\n  }\n};\n","import {z} from 'zod';\n\nimport {\n  createCustomerPrompt,\n  listCustomersPrompt,\n} from '@/shared/customers/prompts';\nimport {\n  createProductPrompt,\n  listProductsPrompt,\n} from '@/shared/products/prompts';\nimport {createPricePrompt, listPricesPrompt} from '@/shared/prices/prompts';\nimport {createPaymentLinkPrompt} from '@/shared/paymentLinks/prompts';\nimport {\n  createInvoicePrompt,\n  listInvoicesPrompt,\n  finalizeInvoicePrompt,\n} from '@/shared/invoices/prompts';\nimport {createInvoiceItemPrompt} from '@/shared/invoiceItems/prompts';\nimport {retrieveBalancePrompt} from '@/shared/balance/prompts';\nimport {createRefundPrompt} from '@/shared/refunds/prompts';\nimport {searchDocumentationPrompt} from '@/shared/documentation/prompts';\nimport {listPaymentIntentsPrompt} from '@/shared/paymentIntents/prompts';\nimport {listSubscriptionsPrompt} from '@/shared/subscriptions/prompts';\n\nimport {\n  createCustomerParameters,\n  listCustomersParameters,\n} from '@/shared/customers/parameters';\nimport {\n  createProductParameters,\n  listProductsParameters,\n} from '@/shared/products/parameters';\nimport {\n  createPriceParameters,\n  listPricesParameters,\n} from '@/shared/prices/parameters';\nimport {createPaymentLinkParameters} from '@/shared/paymentLinks/parameters';\nimport {\n  createInvoiceParameters,\n  listInvoicesParameters,\n  finalizeInvoiceParameters,\n} from '@/shared/invoices/parameters';\nimport {createInvoiceItemParameters} from '@/shared/invoiceItems/parameters';\nimport {retrieveBalanceParameters} from '@/shared/balance/parameters';\nimport {createRefundParameters} from '@/shared/refunds/parameters';\nimport {searchDocumentationParameters} from '@/shared/documentation/parameters';\nimport {listPaymentIntentsParameters} from '@/shared/paymentIntents/parameters';\nimport {listSubscriptionsParameters} from '@/shared/subscriptions/parameters';\n\nimport type {Context} from './configuration';\n\nexport type Tool = {\n  method: string;\n  name: string;\n  description: string;\n  parameters: z.ZodObject<any, any, any, any>;\n  actions: {\n    [key: string]: {\n      [action: string]: boolean;\n    };\n  };\n};\n\nconst tools = (context: Context): Tool[] => [\n  {\n    method: 'create_customer',\n    name: 'Create Customer',\n    description: createCustomerPrompt(context),\n    parameters: createCustomerParameters(context),\n    actions: {\n      customers: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_customers',\n    name: 'List Customers',\n    description: listCustomersPrompt(context),\n    parameters: listCustomersParameters(context),\n    actions: {\n      customers: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_product',\n    name: 'Create Product',\n    description: createProductPrompt(context),\n    parameters: createProductParameters(context),\n    actions: {\n      products: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_products',\n    name: 'List Products',\n    description: listProductsPrompt(context),\n    parameters: listProductsParameters(context),\n    actions: {\n      products: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_price',\n    name: 'Create Price',\n    description: createPricePrompt(context),\n    parameters: createPriceParameters(context),\n    actions: {\n      prices: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_prices',\n    name: 'List Prices',\n    description: listPricesPrompt(context),\n    parameters: listPricesParameters(context),\n    actions: {\n      prices: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_payment_link',\n    name: 'Create Payment Link',\n    description: createPaymentLinkPrompt(context),\n    parameters: createPaymentLinkParameters(context),\n    actions: {\n      paymentLinks: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'create_invoice',\n    name: 'Create Invoice',\n    description: createInvoicePrompt(context),\n    parameters: createInvoiceParameters(context),\n    actions: {\n      invoices: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_invoices',\n    name: 'List Invoices',\n    description: listInvoicesPrompt(context),\n    parameters: listInvoicesParameters(context),\n    actions: {\n      invoices: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_invoice_item',\n    name: 'Create Invoice Item',\n    description: createInvoiceItemPrompt(context),\n    parameters: createInvoiceItemParameters(context),\n    actions: {\n      invoiceItems: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'finalize_invoice',\n    name: 'Finalize Invoice',\n    description: finalizeInvoicePrompt(context),\n    parameters: finalizeInvoiceParameters(context),\n    actions: {\n      invoices: {\n        update: true,\n      },\n    },\n  },\n  {\n    method: 'retrieve_balance',\n    name: 'Retrieve Balance',\n    description: retrieveBalancePrompt(context),\n    parameters: retrieveBalanceParameters(context),\n    actions: {\n      balance: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_refund',\n    name: 'Create Refund',\n    description: createRefundPrompt(context),\n    parameters: createRefundParameters(context),\n    actions: {\n      refunds: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_payment_intents',\n    name: 'List Payment Intents',\n    description: listPaymentIntentsPrompt(context),\n    parameters: listPaymentIntentsParameters(context),\n    actions: {\n      paymentIntents: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'list_subscriptions',\n    name: 'List Subscriptions',\n    description: listSubscriptionsPrompt(context),\n    parameters: listSubscriptionsParameters(context),\n    actions: {\n      subscriptions: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'search_documentation',\n    name: 'Search Documentation',\n    description: searchDocumentationPrompt(context),\n    parameters: searchDocumentationParameters(context),\n    actions: {\n      documentation: {\n        read: true,\n      },\n    },\n  },\n];\n\nexport default tools;\n","import type {Tool} from './tools';\n\n// Actions restrict the subset of API calls that can be made. They should\n// be used in conjunction with Restricted API Keys. Setting a permission to false\n// prevents the related \"tool\" from being considered.\nexport type Object =\n  | 'customers'\n  | 'invoices'\n  | 'invoiceItems'\n  | 'paymentLinks'\n  | 'products'\n  | 'prices'\n  | 'balance'\n  | 'refunds'\n  | 'paymentIntents'\n  | 'subscriptions'\n  | 'documentation';\n\nexport type Permission = 'create' | 'update' | 'read';\n\nexport type Actions = {\n  [K in Object]?: {\n    [K in Permission]?: boolean;\n  };\n} & {\n  balance?: {\n    read?: boolean;\n  };\n};\n\n// Context are settings that are applied to all requests made by the integration.\nexport type Context = {\n  // Account is a Stripe Connected Account ID. If set, the integration will\n  // make requests for this Account.\n  account?: string;\n\n  // Customer is a Stripe Customer ID. If set, the integration will\n  // make requests for this Customer.\n  customer?: string;\n\n  // If set to 'modelcontextprotocol', the Stripe API calls will use a special\n  // header\n  mode?: 'modelcontextprotocol' | 'toolkit';\n};\n\n// Configuration provides various settings and options for the integration\n// to tune and manage how it behaves.\nexport type Configuration = {\n  actions?: Actions;\n  context?: Context;\n};\n\nexport const isToolAllowed = (\n  tool: Tool,\n  configuration: Configuration\n): boolean => {\n  return Object.keys(tool.actions).every((resource) => {\n    // For each resource.permission pair, check the configuration.\n    // @ts-ignore\n    const permissions = tool.actions[resource];\n\n    return Object.keys(permissions).every((permission) => {\n      // @ts-ignore\n      return configuration.actions[resource]?.[permission] === true;\n    });\n  });\n};\n","import type {CoreTool} from 'ai';\nimport {tool} from 'ai';\nimport {z} from 'zod';\nimport StripeAPI from '../shared/api';\n\nexport default function StripeTool(\n  stripeAPI: StripeAPI,\n  method: string,\n  description: string,\n  schema: z.ZodObject<any, any, any, any, {[x: string]: any}>\n): CoreTool {\n  return tool({\n    description: description,\n    parameters: schema,\n    execute: (arg: z.output<typeof schema>) => {\n      return stripeAPI.run(method, arg);\n    },\n  });\n}\n","import StripeAPI from '../shared/api';\nimport tools from '../shared/tools';\nimport {isToolAllowed, type Configuration} from '../shared/configuration';\nimport type {\n  CoreTool,\n  LanguageModelV1StreamPart,\n  Experimental_LanguageModelV1Middleware as LanguageModelV1Middleware,\n} from 'ai';\nimport StripeTool from './tool';\n\ntype StripeMiddlewareConfig = {\n  billing?: {\n    type?: 'token';\n    customer: string;\n    meters: {\n      input?: string;\n      output?: string;\n    };\n  };\n};\n\nclass StripeAgentToolkit {\n  private _stripe: StripeAPI;\n\n  tools: {[key: string]: CoreTool};\n\n  constructor({\n    secretKey,\n    configuration,\n  }: {\n    secretKey: string;\n    configuration: Configuration;\n  }) {\n    this._stripe = new StripeAPI(secretKey, configuration.context);\n    this.tools = {};\n\n    const context = configuration.context || {};\n    const filteredTools = tools(context).filter((tool) =>\n      isToolAllowed(tool, configuration)\n    );\n\n    filteredTools.forEach((tool) => {\n      // @ts-ignore\n      this.tools[tool.method] = StripeTool(\n        this._stripe,\n        tool.method,\n        tool.description,\n        tool.parameters\n      );\n    });\n  }\n\n  middleware(config: StripeMiddlewareConfig): LanguageModelV1Middleware {\n    const bill = async ({\n      promptTokens,\n      completionTokens,\n    }: {\n      promptTokens: number;\n      completionTokens: number;\n    }) => {\n      if (config.billing) {\n        if (config.billing.meters.input) {\n          await this._stripe.createMeterEvent({\n            event: config.billing.meters.input,\n            customer: config.billing.customer,\n            value: promptTokens.toString(),\n          });\n        }\n        if (config.billing.meters.output) {\n          await this._stripe.createMeterEvent({\n            event: config.billing.meters.output,\n            customer: config.billing.customer,\n            value: completionTokens.toString(),\n          });\n        }\n      }\n    };\n\n    return {\n      wrapGenerate: async ({doGenerate}) => {\n        const result = await doGenerate();\n\n        if (config.billing) {\n          await bill(result.usage);\n        }\n\n        return result;\n      },\n\n      wrapStream: async ({doStream}) => {\n        const {stream, ...rest} = await doStream();\n\n        const transformStream = new TransformStream<\n          LanguageModelV1StreamPart,\n          LanguageModelV1StreamPart\n        >({\n          async transform(chunk, controller) {\n            if (chunk.type === 'finish') {\n              if (config.billing) {\n                await bill(chunk.usage);\n              }\n            }\n\n            controller.enqueue(chunk);\n          },\n        });\n\n        return {\n          stream: stream.pipeThrough(transformStream),\n          ...rest,\n        };\n      },\n    };\n  }\n\n  getTools(): {[key: string]: CoreTool} {\n    return this.tools;\n  }\n}\n\nexport default StripeAgentToolkit;\n"],"mappings":"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","names":["z","z","z","z","z","z","z","z","z","z","tool","tool"]}